
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSET COLON FILTER FLOAT GROUP GT GTE IF INDICATOR INTEGER LBRACE LBRACKET LPAREN LT LTE PERCENT QUOTATION RBRACE RBRACKET REBALANCE_FREQUENCY REBALANCE_THRESHOLD RPAREN SELECT_BOTTOM SELECT_TOP SYMPHONY TICKER WEIGHT_EQUAL WEIGHT_SPECIFIEDexpression : SYMPHONY expressionexpression : LPAREN WEIGHT_SPECIFIED PERCENTexpression : LPAREN WEIGHT_EQUALexpression : left_conditional right_conditional\n    right_conditional : LPAREN expression RPAREN RPAREN\n               | INTEGER RPAREN\n    \n    left_conditional : LPAREN comparator LPAREN expression RPAREN\n    \n    expression : FILTER LPAREN expression INTEGER RPAREN LPAREN expression RPAREN\n    \n    expression : SELECT_TOP INTEGER\n               | SELECT_BOTTOM INTEGER\n    \n    comparator : GTE\n               | LTE\n               | GT\n               | LT\n    expression : INDICATOR expression INTEGERexpression : INDICATORexpression :  QUOTATION TICKER QUOTATION '
    
_lr_action_items = {'SYMPHONY':([0,2,8,19,21,27,39,],[2,2,2,2,2,2,2,]),'LPAREN':([0,2,4,5,8,13,14,15,16,17,19,21,27,36,38,39,],[3,3,19,21,3,27,-11,-12,-13,-14,3,3,3,-7,39,3,]),'FILTER':([0,2,8,19,21,27,39,],[5,5,5,5,5,5,5,]),'SELECT_TOP':([0,2,8,19,21,27,39,],[6,6,6,6,6,6,6,]),'SELECT_BOTTOM':([0,2,8,19,21,27,39,],[7,7,7,7,7,7,7,]),'INDICATOR':([0,2,8,19,21,27,39,],[8,8,8,8,8,8,8,]),'QUOTATION':([0,2,8,19,21,25,27,39,],[9,9,9,9,9,32,9,9,]),'$end':([1,8,10,12,18,22,23,26,29,31,32,37,41,],[0,-16,-1,-3,-4,-9,-10,-2,-6,-15,-17,-5,-8,]),'WEIGHT_SPECIFIED':([3,],[11,]),'WEIGHT_EQUAL':([3,],[12,]),'GTE':([3,],[14,]),'LTE':([3,],[15,]),'GT':([3,],[16,]),'LT':([3,],[17,]),'INTEGER':([4,6,7,8,10,12,18,22,23,24,26,29,30,31,32,36,37,41,],[20,22,23,-16,-1,-3,-4,-9,-10,31,-2,-6,35,-15,-17,-7,-5,-8,]),'RPAREN':([8,10,12,18,20,22,23,26,28,29,31,32,33,34,35,37,40,41,],[-16,-1,-3,-4,29,-9,-10,-2,34,-6,-15,-17,36,37,38,-5,41,-8,]),'TICKER':([9,],[25,]),'PERCENT':([11,],[26,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,2,8,19,21,27,39,],[1,10,24,28,30,33,40,]),'left_conditional':([0,2,8,19,21,27,39,],[4,4,4,4,4,4,4,]),'comparator':([3,],[13,]),'right_conditional':([4,],[18,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> SYMPHONY expression','expression',2,'p_expression_symphony','main.py',19),
  ('expression -> LPAREN WEIGHT_SPECIFIED PERCENT','expression',3,'p_expression_specified_weight','main.py',26),
  ('expression -> LPAREN WEIGHT_EQUAL','expression',2,'p_expression_equal_weight','main.py',30),
  ('expression -> left_conditional right_conditional','expression',2,'p_expression_full_conditional','main.py',34),
  ('right_conditional -> LPAREN expression RPAREN RPAREN','right_conditional',4,'p_expression_right_conditional','main.py',44),
  ('right_conditional -> INTEGER RPAREN','right_conditional',2,'p_expression_right_conditional','main.py',45),
  ('left_conditional -> LPAREN comparator LPAREN expression RPAREN','left_conditional',5,'p_expression_left_conditional','main.py',57),
  ('expression -> FILTER LPAREN expression INTEGER RPAREN LPAREN expression RPAREN','expression',8,'p_expression_filter','main.py',65),
  ('expression -> SELECT_TOP INTEGER','expression',2,'p_expression_select','main.py',73),
  ('expression -> SELECT_BOTTOM INTEGER','expression',2,'p_expression_select','main.py',74),
  ('comparator -> GTE','comparator',1,'p_expression_comparator','main.py',83),
  ('comparator -> LTE','comparator',1,'p_expression_comparator','main.py',84),
  ('comparator -> GT','comparator',1,'p_expression_comparator','main.py',85),
  ('comparator -> LT','comparator',1,'p_expression_comparator','main.py',86),
  ('expression -> INDICATOR expression INTEGER','expression',3,'p_expression_indicator_dynamic','main.py',98),
  ('expression -> INDICATOR','expression',1,'p_expression_indicator_fixed','main.py',103),
  ('expression -> QUOTATION TICKER QUOTATION','expression',3,'p_expression_ticker','main.py',107),
]
